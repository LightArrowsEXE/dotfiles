return
    {
       ["Apply Perspective (Layers)"]="--[[ Apply Perspective (Layers)\
Apply the perspective of the top selected line to the other selected lines\
]]\
\
key = \"_aegi_perspective_ambient_plane\"\
\
if i == 1 then\
    an = get('an')\
    fscy = get('fscy')\
    fscx = get('fscx')\
    orgx, orgy =  get('org')\
    posx, posy = get('pos')\
    frz = get('frz')\
    frx = get('frx')\
    fry = get('fry')\
    fax = get('fax')\
end\
\
mod('an', rep(an))\
mod('pos', rep(posx, posy))\
mod('org', rep(orgx, orgy))\
mod('fscy', rep(fscy))\
mod('fscx', rep(fscx))\
mod('frz', rep(frz))\
mod('frx', rep(frx))\
mod('fax', rep(fax))\
mod('fry', rep(fry))\
\
modln(\"extra\", function(extra)\
    if i == 1 then\
        quad = extra[key]\
    end\
    extra[key] = quad\
    return extra\
end)",
       ["Commenting - Toggle comment"]="modify_line(\"comment\", function(current)\
    return not current\
end)",
       ["Commenting - Uncomment selected lines"]="modify_line(\"comment\", replace(false))",
       ["Find Centre"]="--[[ Find Center, by witchymary\
Because the UA one rounds to whole numbers.\
]]\
\
local x1, y1, x2, y2 = get(\"clip\")\
local x = (x1 + x2) / 2\
local y = (y1 + y2) / 2\
\
rem(\"clip\")\
mod(\"pos\",rep(x, y))",
       ["Commenting - Comment selected lines"]="modify_line(\"comment\", replace(true))",
       ["Shadtricks - Glow"]="--[[ Shadtrick Glow, by witchymary\
This mimics the way ua's Blur & Glow applies glow, but for shadtrick'd lines. Adjust the blur and alpha values below.\
]]\
blur = 4\
alpha = \"&HC0&\"\
---\
\
if i%2==1 then\
    duplicate()\
\
    mod(\"blur\", rep(blur))\
    mod(\"4a\", rep(alpha))\
else\
    modln(\"layer\", add(1))\
end",
       ["Bake scale and position"]="--[[ Bake scale and position, by The0x539\
\"Bake\" scale and position into a drawing, i.e. adjust it to \\pos(0,0)\\fscx100\\fscy100 without changing appearance.\
Does not account for other tags like rotation and shearing.\
]]\
\
TARGET_X = 0\
TARGET_Y = 0\
\
local px, py = get('pos')\
px = tonumber(px) - TARGET_X\
py = tonumber(py) - TARGET_Y\
local fscx, fscy = get('fscx'), get('fscy')\
fscx = tonumber(fscx) / 100\
fscy = tonumber(fscy) / 100\
mod('pos', rep(TARGET_X, TARGET_Y))\
mod('fscx', rep(100))\
mod('fscy', rep(100))\
-- petzku please copy this fixed version, which doesn't break integers\
local function decimal(num, max_places)\
    return ('%%.%df'):format(max_places):format(num):gsub('(%.%d-)0+$', '%1'):gsub('%.$', '')\
end\
local function f(x, y)\
    x = px + tonumber(x) * fscx\
    y = py + tonumber(y) * fscy\
    return string.format('%s %s', decimal(x, 3), decimal(y, 3))\
end\
text = text:gsub('(-?[0-9.]+) (-?[0-9.]+)', f)",
       ["Justifier"]="--[[ Justifier, by witchymary\
Snippet to facilitate the manual process of tweaking a sign look justified. Each text line break requires to be split into its own line. It works by altering the \\fsp value of _only_ the white spaces, leaving all other characters alone.\
]]\
FSP_VALUE = 5\
\
\
local fsp_spacing_tag = \"{\\\\fsp\" .. FSP_VALUE .. \"}\"\
local fsp_reset = \"{\\\\fsp\" .. get('fsp') .. \"}\"\
local function process_word(word, is_first_word, is_last_word)\
    local len = #word\
    local before_last_char, last_char = word:sub(1, len - 1), word:sub(len)\
    if len == 1 then\
        if is_first_word then\
            mod(\"fsp\", rep(FSP_VALUE))\
        end\
        return word\
    elseif is_first_word then\
        return before_last_char .. fsp_spacing_tag .. last_char\
    elseif is_last_word then\
        return fsp_reset .. word\
    else\
        return fsp_reset .. before_last_char .. fsp_spacing_tag .. last_char\
    end\
end\
\
local justify_text =\
    text:gsub(\
    \"([^%s]+)\",\
    function(word)\
        local is_first = (word == text:match(\"^%S+\"))\
        local is_last = (word == text:match(\"%S+$\"))\
        return process_word(word, is_first, is_last)\
    end\
)\
\
text = justify_text",
       ["Shadtricks"]="--[[ to Shadtrick, by witchymary\
\
This shadtricks any line with no border or shadow, taking into account both the color and alpha value.\
This utilizes the `\\ko0` method for shadtricking.\
\
]]\
\
local color = get(\"c\")\
rem(\"c\")\
rem(\"4c\")\
\
local alpha = 0\
if get(\"1a\") ~= \"&H00&\" then\
    alpha = get(\"1a\")\
    rem(\"1a\")\
elseif get(\"alpha\") ~= \"&H00&\" then\
    alpha = get(\"alpha\")\
end\
rem(\"alpha\")\
\
mod(\"ko\", rep(0))\
mod(\"shad\", rep(0.01))\
mod(\"4c\", rep(color))\
--mod(\"alpha\", rep(\"&HFF&\"))\
\
rem(\"4a\")\
if alpha ~= 0 then \
    --mod(\"4a\", rep(alpha))\
    mod(\"alpha\", rep(string.format(\"&HFF&\\\\4a%s\", alpha)))\
else\
    --mod(\"4a\", rep(\"&H00&\"))\
    mod(\"alpha\", rep(\"&HFF&\\\\4a&H00&\"))\
end",
    }
